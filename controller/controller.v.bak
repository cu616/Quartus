`define S0 2'b00//GREEN RED
`define S1 2'b01//YELLOW RED
`define S2 2'b11//RED GREEN
`define S3 2'b10//RED YELLOW
module controller(
input CLK，RESET,
input S,
output reg HG,HY,HR,FG,FY,FR,
output reg[3:0]TimerH, TimerL);
//内部状态变量
//定时器输出
wire T1,Ts,Ty;
reg St;
//状态转换
reg[1:0]CurrentState,NextState;//FSM状态触发器
/*===定时器模块=====*/
always @(posedge CLK,negedge RESET )
begin:counter
{TimerH, rimerL}=8'b0;
if (~RESET)
else if(St)
{TimerH, TimerL}=8'b0;
else if((TimerH==5)&(TimerL==9))
begin {TimerH,TimerL}={TimerH，TimerL};end
else if(TimerL==9)
begin TimerH=TimerH+1;Timer=0;end
else
begin TimerH=TimerH;TimerL=TimerL+l;end
end
assign Ty=(TimerH==0)&(TimerL==4);
assign Ts=(TimerH==2)&(TimerL==9);
assign T1=(TimerH==5)&(TimerL==9);
always @(posedge CLK,negedge RESET )
begin:statereg
if(~RESET)CurrentState<=`S0;
else CurrentState<=Nextstate;
end//FSM组合逻辑
always @(S,CurrentState,T1，Ts，Ty)
begin: fsm
case(CurrentState)//S0是用define定义的，在引用时要加右撒号
`S0:begin
Nextstate=(T1&&S)?`S1 :`S0;
St=(T1&& S)? 1:0;
end 
`S1: begin
NextState=(Ty)?`S2:`S1;
St=(Ty)? 1:0;
end
S2: beginNextState=(Ts||~S)?`S3 :`S2;
St=(Ts||~S)? 1:0;
end
`S3:begin
Nextstate=(Ty)?`S0 :`S3;
St=(Ty)?1:0;
end
endcase
end//fsm