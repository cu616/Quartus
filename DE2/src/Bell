module Bell(
    input _1kHzIN, _500Hz, _1Hz, SetHrkey, SetMinkey, CtrlBell,
    input [7:0] Hour, Minute, Second,
    output ALARM_Clock,
    output [7:0] Set_Hr, Set_Min
);
    supply1 Vdd;
    wire Hrh_EQU, HrL_EQU, Minh_EQU, MinL_EQU;
    wire Time_EQU;

    // 闹钟分钟设置
    counter60 SU1(
        .Cnt(Set_Min),
        .nCR(Vdd),
        .En(SetMinkey),
        .CP(_1Hz)
    );

    // 闹钟小时设置
    counter24 SU2(
        .CntH(Set_Hr[7:4]),
        .CntL(Set_Hr[3:0]),
        .nCR(Vdd),
        .EN(SetHrkey),
        .CP(_1Hz)
    );

    // 比较闹钟的设定时间和数字钟当前时间是否相等
    _4bitcomparator SU4(Hrh_EQU, Set_Hr[7:4], Hour[7:4]);
    _4bitcomparator SU5(HrL_EQU, Set_Hr[3:0], Hour[3:0]);
    _4bitcomparator SU6(Minh_EQU, Set_Min[7:4], Minute[7:4]);
    _4bitcomparator SU7(MinL_EQU, Set_Min[3:0], Minute[3:0]);

    assign Time_EQU = (Hrh_EQU & HrL_EQU & Minh_EQU & MinL_EQU);
    assign ALARM_Clock = CtrlBell ? (Time_EQU && ((Second[0] == 1'b1) && _500Hz) || ((Second[0] == 1'b0) && _1kHzIN)) : 1'b0;
endmodule